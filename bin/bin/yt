#!/usr/bin/env bash

# Check if URL argument is provided
if [ -z "$1" ]; then
    echo "Error: URL argument is missing"
    echo "Usage: $0 <YouTube URL>"
    exit 1
fi

# Use the first argument as the URL
URL="$1"

# Try to extract the video's native language from its metadata.
# If it's not provided, default to English ("en").
native_lang=$(yt-dlp --skip-download --print "%(language)s" "$URL")
if [ -z "$native_lang" ]; then
    native_lang="en"
fi
echo "Using language: $native_lang"

# Download subtitles for the native language
yt-dlp --skip-download \
       --write-subs \
       --write-auto-subs \
       --sub-lang "$native_lang" \
       --sub-format ttml \
       --convert-subs srt \
       --output "transcript.%(ext)s" \
       "$URL" && \

# Process the downloaded subtitles:
#   - Remove lines matching timestamp lines like "00:00:00,000 --> 00:00:05,240"
#     (using BSD sed syntax with escaped curly braces for repetition).
#   - Remove lines that only contain sequence numbers.
#   - Remove any HTML-like tags.
sed -i '' \
  -e '/^[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\},[0-9]\{3\} --> [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\},[0-9]\{3\}$/d' \
  -e '/^[[:digit:]]\{1,3\}$/d' \
  -e 's/<[^>]*>//g' \
  transcript."$native_lang".srt && \

# Further clean up to remove any extra blank lines and open in nvim
sed -e 's/<[^>]*>//g' -e '/^[[:space:]]*$/d' transcript."$native_lang".srt | nvim - && \

# Remove the temporary transcript file
rm transcript."$native_lang".srt

